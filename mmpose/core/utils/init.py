import math
import warnings

import torch


def my_kaiming_normal_init_(m):

    def trunc_normal_(tensor, mean, std, a, b):

        def norm_cdf(x):
            # Computes standard normal cumulative distribution function
            return (1. + math.erf(x / math.sqrt(2.))) / 2.

        if (mean < a - 2 * std) or (mean > b + 2 * std):
            warnings.warn(
                'mean is more than 2 std from [a, b] in nn.init.trunc_normal_.'
                'The distribution of values may be incorrect.',
                stacklevel=2)

        with torch.no_grad():
            # Values are generated by using a truncated uniform distribution
            # and then using the inverse CDF for the normal distribution.
            # Get upper and lower cdf values
            _l = norm_cdf((a - mean) / std)
            _u = norm_cdf((b - mean) / std)

            # Uniformly fill tensor with values from [l, u], then translate to
            # [2l-1, 2u-1].
            tensor.uniform_(2 * _l - 1, 2 * _u - 1)

            # Use inverse cdf transform for normal distribution to get
            # truncated standard normal
            tensor.erfinv_()

            # Transform to proper mean, std
            tensor.mul_(std * math.sqrt(2.))
            tensor.add_(mean)

            # Clamp to ensure it's in the proper range
            tensor.clamp_(min=a, max=b)
            return tensor

    trunc_normal_(m.weight, mean=0, std=1, a=-2, b=2)
    with torch.no_grad():
        m.weight.mul_(math.sqrt(2 / float(m.weight.shape[1])))
    if hasattr(m, 'bias') and m.bias is not None:
        torch.nn.init.constant_(m.bias, 0)
